// Write your helper functions here!

require('isomorphic-fetch');


function addDestinationInfo(document, name, diameter, star, distance, moons, imageUrl) {
   // Here is the HTML formatting for our mission target div.
   let div = document.getElementById("missionTarget");
   div.innerHTML = `
                <h2>Mission Destination</h2>
                <ol>
                    <li>Name: ${name}</li>
                    <li>Diameter: ${diameter}</li>
                    <li>Star: ${star}</li>
                    <li>Distance from Earth: ${distance}</li>
                    <li>Number of Moons: ${moons}</li>
                </ol>
                <img src='${imageURL}">
                `;
   
}

function validateInput(testInput) {
   let numberInput = Number(testInput);
   if (testInput === '') {
    return 'Empty';
   }
   else if (isNaN(numberInput)){
    return 'Not a Number';
   }
   else if (isNaN(numberInput) === false) {
    return 'Is a Number';
   }
}

function formSubmission(document, list, pilot, copilot, fuelLevel, cargoLevel) {
   let fuel = document.getElementById('fuelStatus');
   let cargo = document.getElementById('cargoStatus');
   let pilotStatus = document.getElementById('pilotStatus');
   let copilotStatus = document.getElementById('copilotStatus');

   if (validateInput(pilot) === 'Empty' || validateInput(copilot) === 'Empty' || validateInput(fuelLevel) === 'Empty' || validateInput(cargoLevel) === 'Empty') {
    alert('All fields are required!');
   } else if (validateInput(pilot) === "Is a Number" || validateInput(copilot) === "Is a Number" || validateInput(fuelLevel) === "Not a Number" || validateInput(cargoLevel) === "Not a Number" ) {
       alert('Maker sure to enter valid information for each field!'); 
} else {
    list.style.visibility = 'visible'; //referencing styles.css faultyItems
    pilotStatus.innerHTML = `Pilot ${pilot} is ready for launch`;
    copilotStatus.innerHTML = `Co-pilot ${copilot} is ready for launch`;
    let launchStatus = document.getElementById('launchStatus');
    if (fuelLevel < 10000 && cargoLevel <= 10000) {
        fuel.innerHTML = 'Fuel level too low for launch!';
        cargo.innerHTML = 'Cargo mass low enough for launch';
        launchStatus.innerHTML = 'Shuttle not ready for launch!'
        launchStatus.style.color = 'rgb(199, 37, 78)';
    } else if (fuelLevel >= 10000 && cargoLevel > 10000) {
        fuel.innerHTML = 'Fuel level high enough for launch'
        cargo.innerHTML = 'Cargo mass too heavy for launch';
        launchStatus.innerHTML = 'Shuttle Not Ready for Launch';
        launchStatus.style.color = 'rgb(199, 37, 78)';
    } else if (fuelLevel < 10000 && cargoLevel > 10000) {
        fuel.innerHTML = 'Fuel level too low for launch';
        cargo.innerHTML = 'Cargo mass too heavy for launch';
        launchStatus.innerHTML = 'Shuttle Not Ready for Launch';
        launchStatus.style.color = 'rgb(199, 37, 78)';
    } else {
        fuel.innerHTML = 'Fuel level high enough for launch';
        cargo.innerHTML = 'Cargo mass low enough for launch';
        launchStatus.innerHTML = 'Shuttle is Ready for Launch';
        launchStatus.style.color = 'rgb(65, 159, 106)';
        }
    }
}

async function myFetch() {
    // let planetsReturned;

    let planetsReturned = await fetch('https://handlers.education.launchcode.org/static/planets.json')
    .then( function(response) {
    // alert(response.status);    
    if (response.status >= 400) {
            throw new Error ("Bad response");
        }
        else {
            return response.json();
        }
});
// document.getElementById('Mars').innerHTML = planetsReturned;
    return planetsReturned;
}

function pickPlanet(planets) {
    let index = Math.floor(Math.random()*planets.length);
    return planets[index];
}

module.exports.addDestinationInfo = addDestinationInfo;
module.exports.validateInput = validateInput;
module.exports.formSubmission = formSubmission;
module.exports.pickPlanet = pickPlanet; 
module.exports.myFetch = myFetch;




// Write your JavaScript code here!

window.addEventListener("load", function() {

    let listedPlanets;
    let listedPlanetsResponse = myFetch();
    listedPlanetsResponse.then(function (result) {
        listedPlanets = result;
        console.log(listedPlanets);
    });

//    let listedPlanets;
//    // Set listedPlanetsResponse equal to the value returned by calling myFetch()
//    let listedPlanetsResponse = myFetch();
//    alert(listedPlanetsResponse.length);
// //    listedPlanetsResponse.then(function (result) {
//        listedPlanets = result;
//        console.log(listedPlanets);
//    }).then(function () {
//        console.log(listedPlanets);
       // Below this comment call the appropriate helper functions to pick a planet fom the list of planets and add that information to your destination.
      alert(listedPlanetsResponse);
       let selectedPlanet = pickPlanet(listedPlanetsResponse);
        addDestinationInfo(document, selectedPlanet.name, selectedPlanet.diameter, selectedPlanet.star, selectedPlanet.distance, selectedPlanet.moons, selectedPlanet.image);
//    })
   
   let list = document.getElementById("faultyItems");
    list.style.visibility = "hidden";
    let form = document.querySelector("form");
 
    form.addEventListener("submit", function(event) {
        event.preventDefault();
        let pilotInput = document.querySelector("input[name=pilotName]");
        let pilot = pilotInput.value;
 
        let copilotInput = document.querySelector("input[name=copilotName]");
        let copilot = copilotInput.value;
 
        let fuelInput = document.querySelector("input[name=fuelLevel]");
        let fuelLevel = Number(fuelInput.value);
 
        let cargoInput = document.querySelector("input[name=cargoMass]");
        let cargoLevel = Number(cargoInput.value);
 
        formSubmission(document, list, pilot, copilot, fuelLevel, cargoLevel);
    });
 });
 
